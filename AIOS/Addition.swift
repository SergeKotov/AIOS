//
//  Addition.swift
//  AIOS
//
//  Created by Serge Kotov on 09.08.2022.
//

import Foundation


class Me: NimPlayer {
    
    enum GameError: Error {
        case gameNotExist
        case illegalHeap
        case illegalNum
        case illegalSymbol
    }
    
    override func turn() -> Bool {
        do {
            return try makeTurn()
        } catch {
            print("Illegal move! Let's play AI:")
            return super.turn()
        }
    }

    private func makeTurn() throws -> Bool {
        
        guard let nim else {
            throw GameError.gameNotExist
        }
        
        var nonEmptyHeaps = nim.heaps.filter { heap in heap != 0 }
        if nonEmptyHeaps.isEmpty {
            print("\(name) lost ü•µ\n")
            return false
        } else {
            print("Heap?", terminator: " ")
            guard let heapInd = Int(readLine() ?? "1") else {
                throw GameError.illegalSymbol
            }
            guard (1...nonEmptyHeaps.count).contains(heapInd) else {
                throw GameError.illegalHeap
            }
            
            print("How many?", terminator: " ")
            guard let removedNum = Int(readLine() ?? "1") else {
                throw GameError.illegalSymbol
            }
            guard nonEmptyHeaps[heapInd-1] >= removedNum else {
                throw GameError.illegalNum
            }
            
            nonEmptyHeaps[heapInd-1] -= removedNum
            print("\(name) take \(removedNum) from heap \(heapInd)\n")
            nim.heaps = nonEmptyHeaps
            
            return true
        }
    }
}

class VideoNim: Nim {
    
    func show(heaps: [Int]) {
        print(" ", terminator: "")
        for c in heaps {
            let symbol = c > 0 ? "üü¢" : "  "
            print(symbol, terminator: "")
        }
        print()
        let nextHeaps = heaps.map { $0 - 1 }
        if (nextHeaps.max() ?? -1) > 0 {
            show(heaps: nextHeaps)
        }
    }
}

// –≠–ª–µ–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
let sampleX = {
    
    // MARK: –ü—Ä–∏–º–µ—Ä #1
    
    let wordLog = ["GHbdtn", "Hello", nil, nil, "–ü–†—é–≤–µ—Ç"]
    
    var upperWorlds: [String] = []
    for word in wordLog {
        if word != nil {
            let WORD = word!.uppercased()
            upperWorlds.append(WORD)
        }
    }
    
    let filtered = wordLog.compactMap { $0?.uppercased() }
                          .filter { $0.first == "H"}
    
    print(upperWorlds)
    print(filtered)
    
    // MARK: –î—Ä—É–≥–∏–µ –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ 02_Candidates.swift
}

/// –ê—Å—Å–æ—Ü–∏–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¥–ª—è runtime —Ä–µ–∂–∏–º–∞.
/// –ú–æ–∂–Ω–æ –∫–æ—Å–≤–µ–Ω–Ω—ã–º –æ–±—Ä–∞–∑–æ–º —Å–¥–µ–ª–∞—Ç—å –¥–ª—è –Ω–∏—Ö –∏—Ü–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–∞–∫ –º–µ—Ç–æ–¥
/// –í–æ—Ç –ø—Ä–∏–º–µ—Ä –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
let defEnum = {
    enum Rule {
        case one(String)
        case two(String)
        case no
        
        static func get(_ id: Int) -> Self {
            switch id {
            case 1: return .one("–ù–∏–∫–∞–∫–∏—Ö –ø—Ä–∞–≤–∏–ª")
            case 2: return .two("–°–º–æ—Ç—Ä–∏ –ø—Ä–∞–≤–∏–ª–æ 1")
            default:
                return .no
            }
        }
    }

    print("–í–≤–µ–¥–∏—Ç–µ id –¥–ª—è –ø—Ä–∞–≤–∏–ª–∞ 1, 2 –∏–ª–∏ 3:", terminator: " ")
    let input = Int(readLine()!)!
    var rule = Rule.get(input)

    switch rule {
    case .one(let s), .two(let s):
        print("–ú–æ–µ –ø—Ä–∞–≤–∏–ª–æ: " + s)
    default:
        print("–£ –º–µ–Ω—è –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞")
    }
}
